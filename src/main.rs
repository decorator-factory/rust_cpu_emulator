use cpuem::common::Byte;
use cpuem::CPU;

/*
Instruction set:

0x00 NUM <reg> <const>
0x01 MOV <dst> <src>
0x02 ADD <dst> <src>
0x03 SUB <dst> <src>
0x30 SET <adr> <reg>

0xff HLT

*/


fn main() {
    let input_mapping = |_adr: Byte| {
        None
    };

    let output_mapping = |adr: Byte, value: Byte| {
        if adr.0 == 0xcf {
            print!("{}", value.0 as char);
            Some(())
        } else{
            None
        }
    };

    let mut cpu = CPU::new(
        Box::new(input_mapping),
        Box::new(output_mapping)
    );
    cpu.fill_ram([
        0x00, 0x00, 0x48,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x65,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x6c,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x6c,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x6f,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x2c,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x20,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x77,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x6f,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x72,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x6c,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x64,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x21,
        0x30, 0xcf, 0x00,
        0x00, 0x00, 0x0a,
        0x30, 0xcf, 0x00,
        0xff,

    ].iter());

    if let Err(e) = cpu.run() {
        println!("Error: {:?}", e);
    }
}